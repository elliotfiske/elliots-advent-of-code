// function checkSplit(num: SnailNum): SnailNum | null {}

function checkExplode(num: SnailNum, depth = 0): [SnailNum, boolean, boolean] {
  // let idepth = 0;
  // let currnum = new Array<[SnailNum, number]>([num, 0]);
  // while (true) {
  //   if (idepth === 4) {
  //     break;
  //   }
  //
  //   if (typeof currnum[0] !== "number") {
  //   }
  // }

  let ret: [SnailNum, boolean];

  if (depth === 4) {
    return [ret[0], true, true];
  }

  if (typeof num[0] !== "number") {
    ret = checkExplode(num[0], depth + 1);
    if (ret[1]) {
      return ret;
    }
  }

  if (typeof num[1] !== "number") {
    ret = checkExplode(num[1], depth + 1);
    if (ret[1]) {
      return ret;
    }
  }

  return [num, false];
}

// function checkExplode(line: string): string | null {
//   let index = 0;
//   let depth = 0;
//   let explode = false;
//   let most_recent_num: number | null = null;
//
//   while (index < line.length) {
//     if (line[index] === "[") {
//       depth++;
//       if (depth === 4) {
//         explode = true;
//       }
//     } else if (line[index] === "]") {
//       depth--;
//     } else if (line[index] === ",") {
//     } else {
//       most_recent_num = parseInt(line.slice(index));
//       if (most_recent_num >= 10) {
//         index++;
//       }
//
//
//     }
//     index++;
//   }
// }

function parseSnailNum(num: SnailNum, rawnum: string): SnailNum {
  let newnum: SnailNum = num;

  let newline: string | null = null;
  while (true) {
    newline = checkExplode(line);
    if (newnum === null) {
      newnum = checkSplit(newnum);
      if (newnum === null) {
        return newnum;
      }
    }
  }
  assert("Shouldn't get here " + newnum);
}
